#include <stdio.h>
#include <stdlib.h>
struct Node
{
    int data;
    struct Node *prev;
    struct Node *next;
};
struct Node* head = NULL;
struct Node* createNode(int ele){
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
    temp->data = ele;
    temp->next = temp->prev = NULL;
    return temp;
}
void insertNodeInBegining(int ele){
    struct Node* newnode = createNode(element);
        if(head==NULL)
            head = newNode;
            else{
                newNode->next = head;
                head->prev = newNode;
                head = newNode;
            }
     printf("Node inserted!!!!\n");   
    }
void insertNodeAtEnd(int ele){
 struct Node *newnode = createNode(ele);

    if (head == NULL)
        head = newNode;
    else
    {
        struct Node *temp = head;
        while (temp->next != NULL){
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->prev = temp;
    }
    printf("Node inserted!!!!\n");

}

void InsertNodeAtAnyPosition(){
struct Node*newNode = createNode(ele);
   if(head == NULL){
    printf("List is Empty!!!!\n");
   }
   else if(pos == 1){
    insertNodeInBegining(ele);
   }
   else{
    int i=1;
    struct Node* temp = head;
    while(i!=pos && temp!= NULL){
        i++;
        temp = temp->next;
    }
    if(temp!=NULL && pos>0){
        struct Node* newNode = createNode(ele);
        newNode->prev = temp->prev;
        temp->prev->next = newNode;
        newNode->next = temp;
        temp->prev = newNode;
        printf("Node inserted!!!!\n");
    }
   }

  

}
void deleteNodeFromBegining(){
if(head == NULL){
    printf("List is empty!!!!\n");
    }else{
        struct Node *temp = head;
        head = head->next;
        if(head != NULL)
        head->prev = NULL;
        free(temp);
        printf("Node deleted!!!!\n");

}
}
void deleteElementFromEnd(){
 if(head == NULL)
    {
        printf("List is empty!!!!\n");
        }
        else{
            struct Node* temp = head;
            while(temp->next != NULL){
                temp = temp->next;
            }
            if(temp->prev != NULL)
            temp->prev->next = NULL;
            else
            head = NULL;
            printf("Node deleted!!!!\n");
        }

}
void deleteElementFromAnyPosition(int pos)
{
 if(head == NULL)
    printf("List is empty!!!!\n");
    else if(pos ==1){
        deleteNodeFromBegining();
    }
    else{
        struct Node *temp = head;
        int i = 1;
        while(count < pos-1 && temp->next != NULL){
            temp = temp->next;
            i++;
            }
            if(temp != NULL){
                temp->prev->next = temp->next;
                if(temp->next != NULL)
                temp->next->prev = temp->prev;
                free(temp);
                printf("Node deleted!!!!\n");
            }
            else
            printf("Invalid Position!!!!\n");
        }
}
void  search(int target){
  if(head == NULL)
    printf("List is empty");
    else{
        struct Node* temp = head;
        while(temp!=NULL){
            printf("%d", temp->data);
            temp = temp->next
        }
        printf("\n");
    }
}


int main()
{
    while (1)
    {
        printf("------- Singly Linked List -----\n");
        printf("1. Insert Node In Begining\n");
        printf("2. Insert Node At End\n");
        printf("3. Insert Node At Any Position\n");
        printf("4. Delete Node From Begining\n");
        printf("5. Delete Node From End\n");
        printf("6. Delete Node From Any Position\n");
        printf("7. Search Element In List\n");
        printf("8. Sort Element\n");
        printf("9. Display List\n");
        printf("10. Exit\n");
        int Choice, value, pos;
        printf("Enter Choice :");
        scanf("%d", &Choice);
        switch (Choice)
        {
        case 1:
        /*printf("Enter value :");
        scanf("%d", &value);
        insertNodeInBegining(value);
        break;*/
        case 2: /*
         printf("Enter value :");
         scanf("%d", &value);
         insertNodeAtEnd(value);
         break;*/
        case 3: /*
         printf("Enter value :");
         scanf("%d", &value);
         InsertNodeAtAnyPosition(value,pos);
         break;*/
        case 4:
            // deleteNodeFromBegining();
            break;
        case 5:
            // deleteElementFromEnd();
            break;
        case 6:
        /*printf("Enter position :");
        scanf("%d", &pos);
        deleteElementFromAnyPosition(pos);
        break;*/
        case 7: /*
         printf("Enter value to search :");
         scanf("%d", &value);
         searchElement(value);*/
            break;
        case 8:
            // sortElement();
            break;
        case 9:
            // display();
            break;
        case 10:
            // exit(0);
            break;
        default:
            // printf("Invalid Choice !!!!\n");
        }
        system("pause");
    }
    return 0;
}
// next = address

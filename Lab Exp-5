//Lab exp 5:
#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
#include<string.h>
int precedence(char op){
switch (op){
    case '+':
    case'-':
       return 1;
    case '*':
    case '/':
       return 2;
    case '^':
        return 3;
    default:
        return -1;
    }
}
char* convertInfixtoPostfix(char *exp){
int size = strlen(exp),top = -1,index = 0;
char opreator[size];
char *str = (char*)malloc(size+1);
for(int i=0; i<size; i++){
    char ch = exp[i];
    if(isdigit(ch) || isalpha(ch))
    str[index++] = ch;
    else if(ch== '+' || ch == '*' || ch == '/' || ch == '^'){
        if(top == -1)
        opreator[++top] = ch;
        else{
            while(top!=-1 && precedence(ch)<=precedence(opreator[top])){
                str[index++] = opreator[top--];
            }
            opreator[++top] = ch;
        }
    }
    else if(ch == '(')
    opreator[++top] = ch;
    else if(ch == ')'){
        while(opreator[top] != '('){
            str[index++] = opreator[top--];
        }
        top--;
    }
}
while(top!=-1){
    str[index++] = opreator[top--];
}
str[index] = '\0';
return str;
}

char* strrev(char *str){
    int size = =astrlen(str)i,j;
    char *temp = (char*)malloc(size+1);
    for(i=0; i>=0; i--){
        
    }
}
char* convertInfixtoPrefix(char *exp){
    int size = strlen(exp),top = -1,index = 0;
    char opreator[size];
    char *str = (char*)malloc(size+1);
    for(int i=0; i<size; i--){
        char ch = exp[i];
        if(isdigit(ch) || isalpha(ch))
        str[index++] = ch;
        else if(ch== '+' || ch == '*' || ch == '/' || ch == '^'){
            if(top == -1)
            opreator[++top] = ch;
            else{
                while(top!=-1 && precedence(ch)<=precedence(opreator[top])){
                    str[index++] = opreator[top--];
                }
                opreator[++top] = ch;
            }
        }
        else if(ch == ')')
        opreator[++top] = ch;
        else if(ch == '('){
            while(opreator[top] != ')'){
                str[index++] = opreator[top--];
            }
            top--;
        }
    }
    while(top!=-1){
        str[index++] = opreator[top--];
    }
    str[index] = '\0';
    return strrev(str);
    }
int main(){
    char exp[100];
    printf("Enter infix expression :");
    gets(exp);
    printf("Postfix form of expression %s is %d\n", exp,convertInfixtoPostfix(exp));
    printf("Prefix form of expression %s is %d\n", exp,convertInfixtoPrefix(exp));
    return 0;
}

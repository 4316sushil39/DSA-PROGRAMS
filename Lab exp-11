//stack implementation using stack:
#include<stdio.h>
#include<stdlib.h>
struct Node{
    int data;
    struct Node* next;
};
struct Node* top = NULL;
void enqueue(){
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
    if(temp == NULL)
    printf("Queue overflow!!!!\n");
    else{
        temp->data = value;
        temp->next = NULL;
        if(front == NULL)
        front = rear = temp;
        rear = temp;
    }
    printf("%d inserted in queue\n");
}
int dequeue(){
    if(front == NULL){
        printf("queue underflow!!!!\n");
        return -1;
    }
    else{
        struct Node *temp = front;
        front = front->next;
        if(front == NULL)
        rear == NULL;
        int val = temp->data;
        free(temp);
        return val;
    }
}
int peek(){
    if(front == NULL){
        printf("Queue is empty");
        return -1;
    }
}
      void show(){
        if(top == NULL)
        printf("Stack is empty\n");
        else{
            printf("Stack elements are :\n");
            struct Node* temp = top;
            while(temp != NULL){
                printf("%d\n", temp->data);
                temp = temp->next;
        }
        printf("\n");
    }
      }
int main()
{
    while (1)
    {
        printf("1. enqueue\n");
        printf("2. dequeue\n");
        printf("3. peek\n");
        printf("4. show\n");
        printf("Exit\n");
        int choice, val, res;
        printf("Enter choice :");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
        printf("Enter value to push :");
        scanf("%d", &val);
        push(val);
            break;
        case 2:
        res = pop();
        if (res != -1)
        printf("dequeueed element is %d\n",res);
            break;
        case 3:
        res = peek();
        if (res != -1) 
        printf("Stack top element is %d\n", res);
            break;
        case 4:
            show();
            break;
            case 5:
            exit(0);
        default:
         printf("Invalid choice!!!!\n");
        }
        printf("\n");
    }
        system("pause");
    return 0;
}

#include<stdio.h>
#include<stdlib.h>
typedef struct Node{
    int data;
    struct Node *next;
}Node;
Node* head = NULL;
Node* createNode(int ele){
    Node *newNode = (Node*)malloc(sizeof(Node));
    newNode->data = ele;
    newNode->next = NULL;
    return newNode;
}

void insertNodeInBegining(int ele){
    Node *newNode = createNode(ele);
    newNode->next = head;
    head = newNode;
    printf("Node Inserted !!!!\n");
}
void insertNodeAtEnd(int ele){
    Node *newNode = createNode(ele); // insert node at last of list
    if(head == NULL){ // if list is empty
        head = newNode;
        }
        else{
            Node *temp = head; // last node to head
            while(temp->next != NULL){ // temp = address of nodes..
                temp = temp->next; // insert adress of next node 
            }
            temp->next = newNode;
            printf("Node inserted!!!!\n");
}
}
void InsertNodeAtAnyPosition(int ele,int pos){
    if(head == NULL){
        printf("List is empty!!!!\n");
    }

}

void display(){
    if(head==NULL)
    printf("Linked List is Empty !!!\n");
    else{
        Node* temp = head;
    while(temp != NULL){
      printf("%d", temp->data);
      temp = temp->next;
    }   
 }
}
int main(){
    while(1){
        printf("------- Singly Linked List -----\n");
        printf("1. Insert Node In Begining\n");
        printf("2. Insert Node At End\n");
        printf("3. Insert Node At Any Position\n");
        printf("4. Delete Node From Begining\n");
        printf("5. Delete Node From End\n");
        printf("6. Delete Node From Any Position\n");
        printf("7. Search Element In List\n");
        printf("8. Sort Element\n");
        printf("9. Display List\n");
        printf("10. Exit\n");
        int Choice,value;
        printf("Enter Choice :");
        scanf("%d", &Choice);
        switch(Choice){
            case 1: 
            printf("Enter value :");
            scanf("%d", &value);
            insertNodeInBegining(value);
            break;
            case 2:
            break;
            case 3:
            break;
            case 4:
            break;
            case 5:
            break;
            case 6:
            break;
            case 7:
            break;
            case 8:
            break;
            case 9:
            display();
            break;
            case 10:
            exit(0);
            break;
            default:
            printf("Invalid Choice !!!!\n");
        }
        system("pause");
    }
    return 0;
}
